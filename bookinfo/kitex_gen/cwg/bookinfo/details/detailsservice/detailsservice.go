// Code generated by Kitex v0.4.4. DO NOT EDIT.

package detailsservice

import (
	"context"
	details "github.com/cloudwego/biz-demo/bookinfo/kitex_gen/cwg/bookinfo/details"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return detailsServiceServiceInfo
}

var detailsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "DetailsService"
	handlerType := (*details.DetailsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetProduct": kitex.NewMethodInfo(getProductHandler, newDetailsServiceGetProductArgs, newDetailsServiceGetProductResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "details",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*details.DetailsServiceGetProductArgs)
	realResult := result.(*details.DetailsServiceGetProductResult)
	success, err := handler.(details.DetailsService).GetProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDetailsServiceGetProductArgs() interface{} {
	return details.NewDetailsServiceGetProductArgs()
}

func newDetailsServiceGetProductResult() interface{} {
	return details.NewDetailsServiceGetProductResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetProduct(ctx context.Context, req *details.GetProductReq) (r *details.GetProductResp, err error) {
	var _args details.DetailsServiceGetProductArgs
	_args.Req = req
	var _result details.DetailsServiceGetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
